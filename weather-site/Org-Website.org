#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+options: author:t broken-links:nil c:nil creator:nil
#+options: d:(not "LOGBOOK") date:t e:t email:nil expand-links:t f:t
#+options: inline:t num:t p:nil pri:nil prop:nil stat:t tags:t
#+options: tasks:t tex:t timestamp:t title:t toc:t todo:t |:t
#+title: Org-Website
#+date: 2024-07-16
#+author: Lenin G. Falconí
#+email: lenin.falconi@epn.edu.ec
#+language: es
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 27.1 (Org mode 9.7.5)
#+cite_export:

#+latex_class: article
#+latex_class_options:
#+latex_header:
#+latex_header_extra:
#+description:
#+keywords:
#+subtitle:
#+latex_footnote_command: \footnote{%s%s}
#+latex_engraved_theme:
#+latex_compiler: pdflatex

#+latex_header: \usepackage{fancyhdr}
#+latex_header: \usepackage[top=25mm, left=25mm, right=25mm]{geometry}
#+latex_header: \usepackage{longtable}
#+latex_header: \fancyhead[R]{}
#+latex_header: \setlength\headheight{43.0pt} 



#+begin_export latex
\fancyhead[C]{\includegraphics[scale=0.05]{../images/logoEPN.jpg}\\
ESCUELA POLITÉCNICA NACIONAL\\FACULTAD DE INGENIERÍA DE SISTEMAS\\
ARQUITECTURA DE COMPUTADORES}
\thispagestyle{fancy}
#+end_export

* Emacs-Org-Website

Este documento contiene instrucciones para la creación de sitios web
desde Emacs-ORG. Emacs tiene capacidades para publicar un sistema de
archivos en diferentes formatos. El tutorial permite generar las
páginas web desde archivos .org localmente.

* Estructura de Carpetas y Archivos

1. Cree las carpetas /Projects/, /Sites/, /arquitecturapc-site/: 
`/home/<user>/Projects/Sites/arquitecturapc-site/`

2. Dentro de arqutecturapc-site cree una carpeta llamada content

* Archivos Ejecutables

** build-site.el

Para utilizar las bondades de *publishing* de Emacs es necesario crear
un script de emacs lisp para la creación del proyecto. Este código se
ubica en `/home/<user>/Projects/Sites/arquitecturapc-site/` con el
nombre *build-site.el*. El código permite:

  1. Publicar el contenido de los archivos org como website
  2. Indicar cuál es el directorio base que contiene los diferentes
   archivos.
  3. El código se puede usar para publicar los archivos .org en otros
   formatos.

El contenido del archivo es:
#+begin_src elisp
;; load the publishing system
(require 'ox-publish)
(message "Construcción completa");; Set the package installation directory so that packages aren't stored in the
;; ~/.emacs.d/elpa path.
(require 'package)
(setq package-user-dir (expand-file-name "./.packages"))
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

;; Initialize the package system
(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

;; Install dependencies
(package-install 'htmlize)

;; Load the publishing system
(require 'ox-publish)

;; Customize the HTML output
(setq org-html-validation-link nil            ;; Don't show validation link
      org-html-head-include-scripts nil       ;; Use our own scripts
      org-html-head-include-default-style nil ;; Use our own styles
      org-html-head "<link rel=\"stylesheet\" href=\"https://cdn.simplecss.org/simple.min.css\" />")

;; Define the publishing project
(setq org-publish-project-alist
      (list
       (list "org-site:main"
             :recursive t
             :base-directory "./content"
             :publishing-function 'org-html-publish-to-html
             :publishing-directory "./public"
             :with-author nil           ;; Don't include author name
             :with-creator t            ;; Include Emacs and Org versions in footer
             :with-toc t                ;; Include a table of contents
             :section-numbers nil       ;; Don't include section numbers
             :time-stamp-file nil)))    ;; Don't include time stamp in file

;; Generate the site output
(org-publish-all t)

(message "Generación Completa!")
#+end_src
** Ejecutable build.sh
Para abrir Emacs sin la configuración del archivo de inicio y por
tanto utilizar exclusivamente la configuración para el proyecto de
sitio web, se recomienda crear el archivo /build.sh/ en
`/home/<user>/Projects/Sites/arquitecturapc-site/` con el siguiente
contenido:

#+begin_src shell
#!/usr/bin/sh
emacs -Q --script build-site.el
#+end_src

El uso de Q inhibe la carga de la configuración de Emacs desde el
archivo /init.el/. Este paso garantiza que la configuración y
generación del sitio no se vea afectada por otras configuraciones
disponibles para la operación regular de Emacs.

El archivo debe convertirse en ejecutable usando

#+begin_src shell
chmod +x build.sh
#+end_src

Liste los archivos en la ruta
`/home/<user>/Projects/Sites/arquitecturapc-site/` y verifique que sea
un archivo ejecutable.

La ejecución de /build.sh/ se realiza desde la carpeta contenedora del
proyecto haciendo ~./build.sh~ o alternativamente ~sh build.sh~. La
ejecución genera una carpeta /public/ que contiene los archivos
.html. Para lo cual es **importante** que los archivos **.org** se
encuentren en la carpeta
~/home/<user>/Projects/Sites/arquitecturapc-site/content~. De esta
manera el script va a convertir los archivos .org de la carpeta
content en archivos .HTML.

* Servidor HTTP en Emacs
Para presentar el sitio web se puede ejecutar un servidor httpd desde
Emacs. Para esto es necesesario que instale en su Emacs el paquete
~simple-httpd~. Esto lo puede hacer de dos maneras:

1.~M-x package-install~ presionamos enter (i.e. RET) y escribimos el
nombre del paquete: ~simple-httpd~
2. Puede configurar su archivo init.el para que instale y arranque este componente:
   #+begin_src elisp
    (use-package simple-httpd
            :ensure t)
   #+end_src

Finalmente, para desplegar un servidor HTTP desde emacs usar el
siguiente código apuntando a la carpeta /public/ del proyecto

#+begin_src elisp
   M-x httpd-serve-directory
#+end_src
